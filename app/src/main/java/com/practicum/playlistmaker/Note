class DatabaseRepository(private val database: TrackDatabase) {
    fun getAllTracks() = database.tracksDao().getTracksAll()
    fun getTrackById(id: Int) = database.tracksDao().getTrackById(id)
    fun insert(vararg tracks: Track) = database.tracksDao().insertAll()
    fun delete(track: Track) = database.tracksDao().delete(track)
   // fun deleteAll() = database.tracksDao().deleteAll()
}

@Dao
interface TrackDao {
    @androidx.room.Query("SELECT * FROM tracks")
    fun getTracksAll() : List<Track>

    @androidx.room.Query("SELECT * FROM tracks WHERE trackId LIKE :trackId")
    fun getTrackById(trackId: Int): Track

    @Insert
    fun insertAll(vararg tracks: Track)

    @Delete
    fun delete(track: Track)

    //@androidx.room.Query("DELETE * FROM tracks")
    //fun deleteAll()}

    @Database(entities = [Track::class], version = 1)
    abstract class TrackDatabase: RoomDatabase() {
        abstract fun tracksDao(): TrackDao
        companion object{
            @Volatile
            private lateinit var instance: TrackDatabase

            fun getInstance(context: Context): TrackDatabase{
                synchronized(this){
                    if (!::instance.isInitialized) {
                        instance = Room.databaseBuilder(
                            context,
                            TrackDatabase::class.java, "track-database"
                        ).allowMainThreadQueries().build()
                    }
                    return instance
                }
            }
        }
    }